!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCH	Makefile	/^ARCH	:=	-mthumb -mthumb-interwork -march=armv5te -mtune=arm946e-s$/;"	m
ARCH	tools/libs5/Makefile	/^ARCH	:=	-mthumb -mthumb-interwork$/;"	m
ASFLAGS	Makefile	/^ASFLAGS	:=	-g $(ARCH)$/;"	m
ASFLAGS	tools/libs5/Makefile	/^ASFLAGS	:=	-g $(ARCH) -march=armv5te -mtune=arm946e-s$/;"	m
BINFILES	Makefile	/^BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)\/*.*)))$/;"	m
BINFILES	tools/libs5/Makefile	/^BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)\/*.*)))$/;"	m
BUILD	Makefile	/^BUILD		:=	build$/;"	m
BUILD	tools/libs5/Makefile	/^BUILD		:=	build$/;"	m
CFILES	Makefile	/^CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.c)))$/;"	m
CFILES	tools/libs5/Makefile	/^CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.c)))$/;"	m
CFLAGS	Makefile	/^CFLAGS	:=	-g -Wall -O2\\$/;"	m
CFLAGS	tools/libs5/Makefile	/^CFLAGS	:=	-g -Wall -O2\\$/;"	m
CPPFILES	Makefile	/^CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.cpp)))$/;"	m
CPPFILES	tools/libs5/Makefile	/^CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.cpp)))$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS	:=	$(CFLAGS) -fno-rtti -fno-exceptions -std=c++11$/;"	m
CXXFLAGS	tools/libs5/Makefile	/^CXXFLAGS	:= $(CFLAGS) -fno-rtti -fno-exceptions$/;"	m
DATA	Makefile	/^DATA		:=	data  $/;"	m
DATA	tools/libs5/Makefile	/^DATA		:=	data$/;"	m
DEPENDS	tools/libs5/Makefile	/^DEPENDS	:=	$(OFILES:.o=.d)$/;"	m
DEPSDIR	Makefile	/^export DEPSDIR	:=	$(CURDIR)\/$(BUILD)$/;"	m
DEPSDIR	tools/libs5/Makefile	/^export DEPSDIR	:=	$(CURDIR)\/$(BUILD)$/;"	m
GAME_HPP_	include/core/Game.hpp	19;"	d
GAME_ICON	Makefile	/^		export GAME_ICON := $(CURDIR)\/icon.bmp$/;"	m
GAME_ICON	Makefile	/^	export GAME_ICON := $(CURDIR)\/$(TARGET).bmp$/;"	m
GAME_SUBTITLE1	Makefile	/^export GAME_SUBTITLE1	:=	TLOZ:OO-like engine$/;"	m
GAME_SUBTITLE2	Makefile	/^export GAME_SUBTITLE2	:=	by Quent42340$/;"	m
GAME_TITLE	Makefile	/^export GAME_TITLE		:=	ZeldaOracle$/;"	m
GRAPHICS	Makefile	/^GRAPHICS 	:=	graphics graphics\/animations graphics\/characters graphics\/tilesets$/;"	m
GRIT_GRASS_EFFECT_H	assets/grass_effect.h	19;"	d
GRIT_INDOOR_H	build/indoor.h	19;"	d
GRIT_LINK_H	assets/link.h	19;"	d
GRIT_PLAIN_H	build/plain.h	19;"	d
GRIT_UNDERGROUND_H	build/underground.h	19;"	d
GRIT_WATER_EFFECT_H	assets/water_effect.h	19;"	d
Game	include/core/Game.hpp	/^		Game();$/;"	p	class:Game	access:public	signature:()
Game	include/core/Game.hpp	/^class Game {$/;"	c
Game	source/core/Game.cpp	/^Game::Game() {$/;"	f	class:Game	signature:()
Game::Game	include/core/Game.hpp	/^		Game();$/;"	p	class:Game	access:public	signature:()
Game::Game	source/core/Game.cpp	/^Game::Game() {$/;"	f	class:Game	signature:()
Game::initNitroFS	include/core/Game.hpp	/^		void initNitroFS();$/;"	p	class:Game	access:public	signature:()
Game::initNitroFS	source/core/Game.cpp	/^void Game::initNitroFS() {$/;"	f	class:Game	signature:()
Game::initVideo	include/core/Game.hpp	/^		void initVideo();$/;"	p	class:Game	access:public	signature:()
Game::initVideo	source/core/Game.cpp	/^void Game::initVideo() {$/;"	f	class:Game	signature:()
Game::m_continue	include/core/Game.hpp	/^		bool m_continue;$/;"	m	class:Game	access:private
Game::mainLoop	include/core/Game.hpp	/^		void mainLoop();$/;"	p	class:Game	access:public	signature:()
Game::mainLoop	source/core/Game.cpp	/^void Game::mainLoop() {$/;"	f	class:Game	signature:()
Game::~Game	include/core/Game.hpp	/^		~Game();$/;"	p	class:Game	access:public	signature:()
Game::~Game	source/core/Game.cpp	/^Game::~Game() {$/;"	f	class:Game	signature:()
INCLUDE	Makefile	/^export INCLUDE	:=	$(foreach dir,$(INCLUDES),-iquote $(CURDIR)\/$(dir)) \\$/;"	m
INCLUDE	tools/libs5/Makefile	/^export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)\/$(dir)) \\$/;"	m
INCLUDES	Makefile	/^INCLUDES	:=	include external assets $(foreach dir,$(SUBFOLDERS),include\/$(dir))$/;"	m
INCLUDES	tools/libs5/Makefile	/^INCLUDES	:=	include$/;"	m
LD	Makefile	/^	export LD	:=	$(CC)$/;"	m
LD	Makefile	/^	export LD	:=	$(CXX)$/;"	m
LD	tools/libs5/Makefile	/^	export LD	:=	$(CC)$/;"	m
LD	tools/libs5/Makefile	/^	export LD	:=	$(CXX)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS	=	-specs=ds_arm9.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)$/;"	m
LDFLAGS	tools/libs5/Makefile	/^LDFLAGS	=	-specs=ds_arm9.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)$/;"	m
LIBDIRS	Makefile	/^LIBDIRS	:=	$(LIBNDS)$/;"	m
LIBDIRS	tools/libs5/Makefile	/^LIBDIRS	:=	$(LIBNDS)$/;"	m
LIBPATHS	Makefile	/^export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)\/lib)$/;"	m
LIBS	Makefile	/^LIBS	:= 	-lfilesystem -lfat -lnds9$/;"	m
MAPMANAGER_HPP_	include/managers/MapManager.hpp	19;"	d
MAP_HPP_	include/display/Map.hpp	19;"	d
Map	include/display/Map.hpp	/^		Map(Tileset *tileset, std::string filename, u16 width, u16 height, u16 zone, u16 x, u16 y);$/;"	p	class:Map	access:public	signature:(Tileset *tileset, std::string filename, u16 width, u16 height, u16 zone, u16 x, u16 y)
Map	include/display/Map.hpp	/^class Map {$/;"	c
Map	source/display/Map.cpp	/^Map::Map(Tileset *tileset, std::string filename, u16 width, u16 height, u16 zone, u16 x, u16 y) {$/;"	f	class:Map	signature:(Tileset *tileset, std::string filename, u16 width, u16 height, u16 zone, u16 x, u16 y)
Map::Map	include/display/Map.hpp	/^		Map(Tileset *tileset, std::string filename, u16 width, u16 height, u16 zone, u16 x, u16 y);$/;"	p	class:Map	access:public	signature:(Tileset *tileset, std::string filename, u16 width, u16 height, u16 zone, u16 x, u16 y)
Map::Map	source/display/Map.cpp	/^Map::Map(Tileset *tileset, std::string filename, u16 width, u16 height, u16 zone, u16 x, u16 y) {$/;"	f	class:Map	signature:(Tileset *tileset, std::string filename, u16 width, u16 height, u16 zone, u16 x, u16 y)
Map::load	include/display/Map.hpp	/^		void load();$/;"	p	class:Map	access:public	signature:()
Map::load	source/display/Map.cpp	/^void Map::load() {$/;"	f	class:Map	signature:()
Map::loadTile	include/display/Map.hpp	/^		void loadTile(s16 x, s16 y, s8 offsetX = 0, s8 offsetY = 0);$/;"	p	class:Map	access:public	signature:(s16 x, s16 y, s8 offsetX = 0, s8 offsetY = 0)
Map::loadTile	source/display/Map.cpp	/^void Map::loadTile(s16 x, s16 y, s8 offsetX, s8 offsetY) {$/;"	f	class:Map	signature:(s16 x, s16 y, s8 offsetX, s8 offsetY)
Map::m_data	include/display/Map.hpp	/^		u16 *m_data;$/;"	m	class:Map	access:private
Map::m_height	include/display/Map.hpp	/^		u16 m_height;$/;"	m	class:Map	access:private
Map::m_tileset	include/display/Map.hpp	/^		Tileset *m_tileset;$/;"	m	class:Map	access:private
Map::m_width	include/display/Map.hpp	/^		u16 m_width;$/;"	m	class:Map	access:private
Map::m_x	include/display/Map.hpp	/^		u16 m_x;$/;"	m	class:Map	access:private
Map::m_y	include/display/Map.hpp	/^		u16 m_y;$/;"	m	class:Map	access:private
Map::m_zone	include/display/Map.hpp	/^		u16 m_zone;$/;"	m	class:Map	access:private
Map::screenPos	include/display/Map.hpp	/^		u16 screenPos(s16 x, s16 y) const;$/;"	p	class:Map	access:public	signature:(s16 x, s16 y) const
Map::screenPos	source/display/Map.cpp	/^u16 Map::screenPos(s16 x, s16 y) const {$/;"	f	class:Map	signature:(s16 x, s16 y) const
Map::scrollX	include/display/Map.hpp	/^		static s16 scrollX;$/;"	m	class:Map	access:public
Map::scrollX	source/display/Map.cpp	/^s16 Map::scrollX = 0;$/;"	m	class:Map	file:
Map::scrollY	include/display/Map.hpp	/^		static s16 scrollY;$/;"	m	class:Map	access:public
Map::scrollY	source/display/Map.cpp	/^s16 Map::scrollY = 0;$/;"	m	class:Map	file:
Map::x	include/display/Map.hpp	/^		u16 x() const { return m_x; }$/;"	f	class:Map	access:public	signature:() const
Map::y	include/display/Map.hpp	/^		u16 y() const { return m_y; }$/;"	f	class:Map	access:public	signature:() const
Map::zone	include/display/Map.hpp	/^		u16 zone() const { return m_zone; }$/;"	f	class:Map	access:public	signature:() const
Map::~Map	include/display/Map.hpp	/^		~Map();$/;"	p	class:Map	access:public	signature:()
Map::~Map	source/display/Map.cpp	/^Map::~Map() {$/;"	f	class:Map	signature:()
MapManager	include/managers/MapManager.hpp	/^namespace MapManager {$/;"	n
MapManager::currentMap	source/managers/MapManager.cpp	/^Map *MapManager::currentMap = NULL;$/;"	m	class:MapManager	file:
MapManager::free	include/managers/MapManager.hpp	/^	void free();$/;"	p	namespace:MapManager	signature:()
MapManager::free	source/managers/MapManager.cpp	/^void MapManager::free() {$/;"	f	class:MapManager	signature:()
MapManager::init	include/managers/MapManager.hpp	/^	void init();$/;"	p	namespace:MapManager	signature:()
MapManager::init	source/managers/MapManager.cpp	/^void MapManager::init() {$/;"	f	class:MapManager	signature:()
MapManager::initMaps	include/managers/MapManager.hpp	/^	void initMaps();$/;"	p	namespace:MapManager	signature:()
MapManager::initMaps	source/managers/MapManager.cpp	/^void MapManager::initMaps() {$/;"	f	class:MapManager	signature:()
MapManager::initTilesets	include/managers/MapManager.hpp	/^	void initTilesets();$/;"	p	namespace:MapManager	signature:()
MapManager::initTilesets	source/managers/MapManager.cpp	/^void MapManager::initTilesets() {$/;"	f	class:MapManager	signature:()
MapManager::mapBg	source/managers/MapManager.cpp	/^u16 MapManager::mapBg;$/;"	m	class:MapManager	file:
MapManager::maps	source/managers/MapManager.cpp	/^std::vector<std::vector<Map*>> MapManager::maps;$/;"	m	class:MapManager	file:
MapManager::scrollMaps	include/managers/MapManager.hpp	/^	void scrollMaps(s8 dx, s8 dy);$/;"	p	namespace:MapManager	signature:(s8 dx, s8 dy)
MapManager::scrollMaps	source/managers/MapManager.cpp	/^void MapManager::scrollMaps(s8 dx, s8 dy) {$/;"	f	class:MapManager	signature:(s8 dx, s8 dy)
MapManager::tilesets	source/managers/MapManager.cpp	/^std::vector<Tileset*> MapManager::tilesets;$/;"	m	class:MapManager	file:
NITRODATA	Makefile	/^NITRODATA	:=	nitrofiles$/;"	m
NITRO_FILES	Makefile	/^	export NITRO_FILES	:=	$(CURDIR)\/$(NITRODATA)$/;"	m
OFILES	Makefile	/^export OFILES	:=	$(addsuffix .o,$(BINFILES)) \\$/;"	m
OFILES	tools/libs5/Makefile	/^export OFILES	:=	$(addsuffix .o,$(BINFILES)) \\$/;"	m
OUTPUT	Makefile	/^export OUTPUT	:=	$(CURDIR)\/$(TARGET)$/;"	m
OUTPUT	tools/libs5/Makefile	/^export OUTPUT	:=	$(CURDIR)\/lib\/lib$(TARGET).a$/;"	m
PNGFILES	Makefile	/^PNGFILES	:=	$(foreach dir,$(GRAPHICS),$(notdir $(wildcard $(dir)\/*.png)))$/;"	m
SCREEN_DOWN	external/libs5.h	15;"	d
SCREEN_UP	external/libs5.h	14;"	d
SFILES	Makefile	/^SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.s)))$/;"	m
SFILES	tools/libs5/Makefile	/^SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.s)))$/;"	m
SOURCES	Makefile	/^SOURCES		:=	source external assets $(foreach dir,$(SUBFOLDERS),source\/$(dir))$/;"	m
SOURCES	tools/libs5/Makefile	/^SOURCES		:=	source$/;"	m
SPR_AT0	external/libs5.h	22;"	d
SPR_AT0	tools/libs5/include/libs5.h	19;"	d
SPR_AT0_SUB	external/libs5.h	27;"	d
SPR_AT0_SUB	tools/libs5/include/libs5.h	24;"	d
SPR_AT1	external/libs5.h	23;"	d
SPR_AT1	tools/libs5/include/libs5.h	20;"	d
SPR_AT1_SUB	external/libs5.h	28;"	d
SPR_AT1_SUB	tools/libs5/include/libs5.h	25;"	d
SPR_AT2	external/libs5.h	24;"	d
SPR_AT2	tools/libs5/include/libs5.h	21;"	d
SPR_AT2_SUB	external/libs5.h	29;"	d
SPR_AT2_SUB	tools/libs5/include/libs5.h	26;"	d
SUBFOLDERS	Makefile	/^SUBFOLDERS	:=	core display managers$/;"	m
SprColors_16	external/libs5.h	/^	SprColors_16		= 0,$/;"	e	enum:__anon5
SprColors_16	tools/libs5/include/libs5.h	/^	SprColors_16		= 0,$/;"	e	enum:__anon2
SprColors_256	external/libs5.h	/^	SprColors_256		= 1$/;"	e	enum:__anon5
SprColors_256	tools/libs5/include/libs5.h	/^	SprColors_256		= 1$/;"	e	enum:__anon2
SprSize_16x16	external/libs5.h	/^	SprSize_16x16	= 4,$/;"	e	enum:__anon4
SprSize_16x16	tools/libs5/include/libs5.h	/^	SprSize_16x16	= 4,$/;"	e	enum:__anon1
SprSize_16x32	external/libs5.h	/^	SprSize_16x32	= 10,$/;"	e	enum:__anon4
SprSize_16x32	tools/libs5/include/libs5.h	/^	SprSize_16x32	= 10,$/;"	e	enum:__anon1
SprSize_16x8	external/libs5.h	/^	SprSize_16x8	= 1,$/;"	e	enum:__anon4
SprSize_16x8	tools/libs5/include/libs5.h	/^	SprSize_16x8	= 1,$/;"	e	enum:__anon1
SprSize_32x16	external/libs5.h	/^	SprSize_32x16	= 9,$/;"	e	enum:__anon4
SprSize_32x16	tools/libs5/include/libs5.h	/^	SprSize_32x16	= 9,$/;"	e	enum:__anon1
SprSize_32x32	external/libs5.h	/^	SprSize_32x32	= 8,$/;"	e	enum:__anon4
SprSize_32x32	tools/libs5/include/libs5.h	/^	SprSize_32x32	= 8,$/;"	e	enum:__anon1
SprSize_32x64	external/libs5.h	/^	SprSize_32x64	= 14$/;"	e	enum:__anon4
SprSize_32x64	tools/libs5/include/libs5.h	/^	SprSize_32x64	= 14$/;"	e	enum:__anon1
SprSize_32x8	external/libs5.h	/^	SprSize_32x8	= 5,$/;"	e	enum:__anon4
SprSize_32x8	tools/libs5/include/libs5.h	/^	SprSize_32x8	= 5,$/;"	e	enum:__anon1
SprSize_64x32	external/libs5.h	/^	SprSize_64x32	= 13,$/;"	e	enum:__anon4
SprSize_64x32	tools/libs5/include/libs5.h	/^	SprSize_64x32	= 13,$/;"	e	enum:__anon1
SprSize_64x64	external/libs5.h	/^	SprSize_64x64   = 12,$/;"	e	enum:__anon4
SprSize_64x64	tools/libs5/include/libs5.h	/^	SprSize_64x64   = 12,$/;"	e	enum:__anon1
SprSize_8x16	external/libs5.h	/^	SprSize_8x16	= 2,$/;"	e	enum:__anon4
SprSize_8x16	tools/libs5/include/libs5.h	/^	SprSize_8x16	= 2,$/;"	e	enum:__anon1
SprSize_8x32	external/libs5.h	/^	SprSize_8x32	= 6,$/;"	e	enum:__anon4
SprSize_8x32	tools/libs5/include/libs5.h	/^	SprSize_8x32	= 6,$/;"	e	enum:__anon1
SprSize_8x8	external/libs5.h	/^	SprSize_8x8		= 0,$/;"	e	enum:__anon4
SprSize_8x8	tools/libs5/include/libs5.h	/^	SprSize_8x8		= 0,$/;"	e	enum:__anon1
TARGET	Makefile	/^TARGET		:=	$(shell basename $(CURDIR))$/;"	m
TARGET	tools/libs5/Makefile	/^TARGET		:=	$(shell basename $(CURDIR))$/;"	m
TILESET_HPP_	include/display/Tileset.hpp	19;"	d
Tileset	include/display/Tileset.hpp	/^	Tileset(u8 *_info, const unsigned int *_tiles, u32 _tilesLength, const u16 *_palette, u32 _palLength) :$/;"	f	struct:Tileset	access:public	signature:(u8 *_info, const unsigned int *_tiles, u32 _tilesLength, const u16 *_palette, u32 _palLength)
Tileset	include/display/Tileset.hpp	/^struct Tileset {$/;"	s
Tileset::Tileset	include/display/Tileset.hpp	/^	Tileset(u8 *_info, const unsigned int *_tiles, u32 _tilesLength, const u16 *_palette, u32 _palLength) :$/;"	f	struct:Tileset	access:public	signature:(u8 *_info, const unsigned int *_tiles, u32 _tilesLength, const u16 *_palette, u32 _palLength)
Tileset::info	include/display/Tileset.hpp	/^	u8 *info;$/;"	m	struct:Tileset	access:public
Tileset::palLength	include/display/Tileset.hpp	/^	u32 palLength;$/;"	m	struct:Tileset	access:public
Tileset::palette	include/display/Tileset.hpp	/^	const u16 *palette;$/;"	m	struct:Tileset	access:public
Tileset::tiles	include/display/Tileset.hpp	/^	const unsigned int *tiles;$/;"	m	struct:Tileset	access:public
Tileset::tilesLength	include/display/Tileset.hpp	/^	u32 tilesLength;$/;"	m	struct:Tileset	access:public
VPATH	Makefile	/^export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)\/$(dir)) \\$/;"	m
VPATH	tools/libs5/Makefile	/^export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)\/$(dir)) \\$/;"	m
VramBankF	external/libs5.h	/^	VramBankF	= 0,$/;"	e	enum:__anon6
VramBankF	tools/libs5/include/libs5.h	/^	VramBankF	= 0,$/;"	e	enum:__anon3
VramBankG	external/libs5.h	/^	VramBankG   = 1,$/;"	e	enum:__anon6
VramBankG	tools/libs5/include/libs5.h	/^	VramBankG   = 1,$/;"	e	enum:__anon3
VramBankI	external/libs5.h	/^	VramBankI   = 2$/;"	e	enum:__anon6
VramBankI	tools/libs5/include/libs5.h	/^	VramBankI   = 2$/;"	e	enum:__anon3
_libs5_h_	external/libs5.h	10;"	d
_libs5_h_	tools/libs5/include/libs5.h	10;"	d
clearSprite	external/libs5.c	/^void clearSprite(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
clearSprite	external/libs5.h	/^void clearSprite(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
clearSprite	tools/libs5/include/libs5.h	/^void clearSprite(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
clearSprite	tools/libs5/source/libs5.c	/^void clearSprite(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
currentMap	source/managers/MapManager.cpp	/^Map *MapManager::currentMap = NULL;$/;"	m	class:MapManager	file:
disableSpriteAlpha	external/libs5.c	/^void disableSpriteAlpha(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
disableSpriteAlpha	external/libs5.h	/^void disableSpriteAlpha(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
disableSpriteAlpha	tools/libs5/include/libs5.h	/^void disableSpriteAlpha(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
disableSpriteAlpha	tools/libs5/source/libs5.c	/^void disableSpriteAlpha(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
disableSpriteMosaic	external/libs5.c	/^void disableSpriteMosaic(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
disableSpriteMosaic	external/libs5.h	/^void disableSpriteMosaic(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
disableSpriteMosaic	tools/libs5/include/libs5.h	/^void disableSpriteMosaic(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
disableSpriteMosaic	tools/libs5/source/libs5.c	/^void disableSpriteMosaic(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
drawSprite	external/libs5.c	/^void drawSprite(u8 screen, u8 sprId, u16 x, u16 y, s5_dimension dimension,$/;"	f	signature:(u8 screen, u8 sprId, u16 x, u16 y, s5_dimension dimension, s5_colors colors, u16 baseTile, u8 palette)
drawSprite	external/libs5.h	/^void drawSprite(u8 screen, u8 sprId, u16 x, u16 y, s5_dimension dimension,$/;"	p	signature:(u8 screen, u8 sprId, u16 x, u16 y, s5_dimension dimension, s5_colors colors, u16 baseTile, u8 palette)
drawSprite	tools/libs5/include/libs5.h	/^void drawSprite(u8 screen, u8 sprId, u16 x, u16 y, s5_dimension dimension,$/;"	p	signature:(u8 screen, u8 sprId, u16 x, u16 y, s5_dimension dimension, s5_colors colors, u16 baseTile, u8 palette)
drawSprite	tools/libs5/source/libs5.c	/^void drawSprite(u8 screen, u8 sprId, u16 x, u16 y, s5_dimension dimension,$/;"	f	signature:(u8 screen, u8 sprId, u16 x, u16 y, s5_dimension dimension, s5_colors colors, u16 baseTile, u8 palette)
enableSpriteAlpha	external/libs5.c	/^void enableSpriteAlpha(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
enableSpriteAlpha	external/libs5.h	/^void enableSpriteAlpha(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
enableSpriteAlpha	tools/libs5/include/libs5.h	/^void enableSpriteAlpha(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
enableSpriteAlpha	tools/libs5/source/libs5.c	/^void enableSpriteAlpha(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
enableSpriteMosaic	external/libs5.c	/^void enableSpriteMosaic(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
enableSpriteMosaic	external/libs5.h	/^void enableSpriteMosaic(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
enableSpriteMosaic	tools/libs5/include/libs5.h	/^void enableSpriteMosaic(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
enableSpriteMosaic	tools/libs5/source/libs5.c	/^void enableSpriteMosaic(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
enableSprites	external/libs5.c	/^void enableSprites(u8 screen, u8 extPalettes)$/;"	f	signature:(u8 screen, u8 extPalettes)
enableSprites	external/libs5.h	/^void enableSprites(u8 screen, u8 extPalettes);$/;"	p	signature:(u8 screen, u8 extPalettes)
enableSprites	tools/libs5/include/libs5.h	/^void enableSprites(u8 screen, u8 extPalettes);$/;"	p	signature:(u8 screen, u8 extPalettes)
enableSprites	tools/libs5/source/libs5.c	/^void enableSprites(u8 screen, u8 extPalettes)$/;"	f	signature:(u8 screen, u8 extPalettes)
free	include/managers/MapManager.hpp	/^	void free();$/;"	p	namespace:MapManager	signature:()
free	source/managers/MapManager.cpp	/^void MapManager::free() {$/;"	f	class:MapManager	signature:()
getSpriteX	external/libs5.c	/^u16 getSpriteX(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
getSpriteX	external/libs5.h	/^u16 getSpriteX(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
getSpriteX	tools/libs5/include/libs5.h	/^u16 getSpriteX(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
getSpriteX	tools/libs5/source/libs5.c	/^u16 getSpriteX(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
getSpriteY	external/libs5.c	/^u16 getSpriteY(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
getSpriteY	external/libs5.h	/^u16 getSpriteY(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
getSpriteY	tools/libs5/include/libs5.h	/^u16 getSpriteY(u8 screen, u8 sprId);$/;"	p	signature:(u8 screen, u8 sprId)
getSpriteY	tools/libs5/source/libs5.c	/^u16 getSpriteY(u8 screen, u8 sprId)$/;"	f	signature:(u8 screen, u8 sprId)
grass_effectTiles	assets/grass_effect.s	/^grass_effectTiles:$/;"	l
grass_effectTilesLen	assets/grass_effect.h	21;"	d
height	tools/reader/reader.c	/^unsigned short width, height;$/;"	v
icons	Makefile	/^icons := $(wildcard *.bmp)$/;"	m
indoorPal	build/indoor.s	/^indoorPal:$/;"	l
indoorPalLen	build/indoor.h	24;"	d
indoorTiles	build/indoor.s	/^indoorTiles:$/;"	l
indoorTilesLen	build/indoor.h	21;"	d
info	include/display/Tileset.hpp	/^	u8 *info;$/;"	m	struct:Tileset	access:public
init	include/managers/MapManager.hpp	/^	void init();$/;"	p	namespace:MapManager	signature:()
init	source/managers/MapManager.cpp	/^void MapManager::init() {$/;"	f	class:MapManager	signature:()
initMaps	include/managers/MapManager.hpp	/^	void initMaps();$/;"	p	namespace:MapManager	signature:()
initMaps	source/managers/MapManager.cpp	/^void MapManager::initMaps() {$/;"	f	class:MapManager	signature:()
initNitroFS	include/core/Game.hpp	/^		void initNitroFS();$/;"	p	class:Game	access:public	signature:()
initNitroFS	source/core/Game.cpp	/^void Game::initNitroFS() {$/;"	f	class:Game	signature:()
initTilesets	include/managers/MapManager.hpp	/^	void initTilesets();$/;"	p	namespace:MapManager	signature:()
initTilesets	source/managers/MapManager.cpp	/^void MapManager::initTilesets() {$/;"	f	class:MapManager	signature:()
initVideo	include/core/Game.hpp	/^		void initVideo();$/;"	p	class:Game	access:public	signature:()
initVideo	source/core/Game.cpp	/^void Game::initVideo() {$/;"	f	class:Game	signature:()
linkPal	assets/link.s	/^linkPal:$/;"	l
linkPalLen	assets/link.h	24;"	d
linkTiles	assets/link.s	/^linkTiles:$/;"	l
linkTilesLen	assets/link.h	21;"	d
load	include/display/Map.hpp	/^		void load();$/;"	p	class:Map	access:public	signature:()
load	source/display/Map.cpp	/^void Map::load() {$/;"	f	class:Map	signature:()
loadExtPalette	external/libs5.h	/^void loadExtPalette(s5_vramBank vramBank, u8 slot, const void* palette);$/;"	p	signature:(s5_vramBank vramBank, u8 slot, const void* palette)
loadExtPalette	external/libs5_asm.s	/^loadExtPalette:$/;"	l
loadExtPalette	tools/libs5/include/libs5.h	/^void loadExtPalette(s5_vramBank vramBank, u8 slot, const void* palette);$/;"	p	signature:(s5_vramBank vramBank, u8 slot, const void* palette)
loadExtPalette	tools/libs5/source/libs5_asm.s	/^loadExtPalette:$/;"	l
loadPalette	external/libs5.h	/^void loadPalette(u8 screen, u8 slot, const void* palette);$/;"	p	signature:(u8 screen, u8 slot, const void* palette)
loadPalette	external/libs5_asm.s	/^loadPalette:$/;"	l
loadPalette	tools/libs5/include/libs5.h	/^void loadPalette(u8 screen, u8 slot, const void* palette);$/;"	p	signature:(u8 screen, u8 slot, const void* palette)
loadPalette	tools/libs5/source/libs5_asm.s	/^loadPalette:$/;"	l
loadPalette256	external/libs5.h	/^void loadPalette256(u8 screen, const void* palette);$/;"	p	signature:(u8 screen, const void* palette)
loadPalette256	external/libs5_asm.s	/^loadPalette256:$/;"	l
loadPalette256	tools/libs5/include/libs5.h	/^void loadPalette256(u8 screen, const void* palette);$/;"	p	signature:(u8 screen, const void* palette)
loadPalette256	tools/libs5/source/libs5_asm.s	/^loadPalette256:$/;"	l
loadTile	include/display/Map.hpp	/^		void loadTile(s16 x, s16 y, s8 offsetX = 0, s8 offsetY = 0);$/;"	p	class:Map	access:public	signature:(s16 x, s16 y, s8 offsetX = 0, s8 offsetY = 0)
loadTile	source/display/Map.cpp	/^void Map::loadTile(s16 x, s16 y, s8 offsetX, s8 offsetY) {$/;"	f	class:Map	signature:(s16 x, s16 y, s8 offsetX, s8 offsetY)
loadTiles	external/libs5.h	/^void loadTiles(u8 screen, u8 baseTile, u8 numberOfTiles, s5_colors format, const void* data);$/;"	p	signature:(u8 screen, u8 baseTile, u8 numberOfTiles, s5_colors format, const void* data)
loadTiles	external/libs5_asm.s	/^loadTiles:$/;"	l
loadTiles	tools/libs5/include/libs5.h	/^void loadTiles(u8 screen, u8 baseTile, u8 numberOfTiles, s5_colors format, const void* data);$/;"	p	signature:(u8 screen, u8 baseTile, u8 numberOfTiles, s5_colors format, const void* data)
loadTiles	tools/libs5/source/libs5_asm.s	/^loadTiles:$/;"	l
lt_copyLoop	external/libs5_asm.s	/^lt_copyLoop:$/;"	l
lt_copyLoop	tools/libs5/source/libs5_asm.s	/^lt_copyLoop:$/;"	l
m_continue	include/core/Game.hpp	/^		bool m_continue;$/;"	m	class:Game	access:private
m_data	include/display/Map.hpp	/^		u16 *m_data;$/;"	m	class:Map	access:private
m_height	include/display/Map.hpp	/^		u16 m_height;$/;"	m	class:Map	access:private
m_tileset	include/display/Map.hpp	/^		Tileset *m_tileset;$/;"	m	class:Map	access:private
m_width	include/display/Map.hpp	/^		u16 m_width;$/;"	m	class:Map	access:private
m_x	include/display/Map.hpp	/^		u16 m_x;$/;"	m	class:Map	access:private
m_y	include/display/Map.hpp	/^		u16 m_y;$/;"	m	class:Map	access:private
m_zone	include/display/Map.hpp	/^		u16 m_zone;$/;"	m	class:Map	access:private
main	source/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	tools/reader/reader.c	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	tools/reader/reader.c	/^int main(void) {$/;"	f	signature:(void)
mainLoop	include/core/Game.hpp	/^		void mainLoop();$/;"	p	class:Game	access:public	signature:()
mainLoop	source/core/Game.cpp	/^void Game::mainLoop() {$/;"	f	class:Game	signature:()
mapBg	source/managers/MapManager.cpp	/^u16 MapManager::mapBg;$/;"	m	class:MapManager	file:
maps	source/managers/MapManager.cpp	/^std::vector<std::vector<Map*>> MapManager::maps;$/;"	m	class:MapManager	file:
moveSprite	external/libs5.c	/^void moveSprite(u8 screen, u8 sprId, u16 x, u16 y)$/;"	f	signature:(u8 screen, u8 sprId, u16 x, u16 y)
moveSprite	external/libs5.h	/^void moveSprite(u8 screen, u8 sprId, u16 x, u16 y);$/;"	p	signature:(u8 screen, u8 sprId, u16 x, u16 y)
moveSprite	tools/libs5/include/libs5.h	/^void moveSprite(u8 screen, u8 sprId, u16 x, u16 y);$/;"	p	signature:(u8 screen, u8 sprId, u16 x, u16 y)
moveSprite	tools/libs5/source/libs5.c	/^void moveSprite(u8 screen, u8 sprId, u16 x, u16 y)$/;"	f	signature:(u8 screen, u8 sprId, u16 x, u16 y)
outfilepath	tools/reader/reader.c	/^char* outfilepath;$/;"	v
palLength	include/display/Tileset.hpp	/^	u32 palLength;$/;"	m	struct:Tileset	access:public
palette	include/display/Tileset.hpp	/^	const u16 *palette;$/;"	m	struct:Tileset	access:public
plainPal	build/plain.s	/^plainPal:$/;"	l
plainPalLen	build/plain.h	24;"	d
plainTiles	build/plain.s	/^plainTiles:$/;"	l
plainTilesLen	build/plain.h	21;"	d
processNode	tools/reader/reader.c	/^processNode(xmlTextReaderPtr reader) {$/;"	f	file:	signature:(xmlTextReaderPtr reader)
s5_colors	external/libs5.h	/^} s5_colors;$/;"	t	typeref:enum:__anon5
s5_colors	tools/libs5/include/libs5.h	/^} s5_colors;$/;"	t	typeref:enum:__anon2
s5_dimension	external/libs5.h	/^} s5_dimension;$/;"	t	typeref:enum:__anon4
s5_dimension	tools/libs5/include/libs5.h	/^} s5_dimension;$/;"	t	typeref:enum:__anon1
s5_vramBank	external/libs5.h	/^} s5_vramBank;$/;"	t	typeref:enum:__anon6
s5_vramBank	tools/libs5/include/libs5.h	/^} s5_vramBank;$/;"	t	typeref:enum:__anon3
screenPos	include/display/Map.hpp	/^		u16 screenPos(s16 x, s16 y) const;$/;"	p	class:Map	access:public	signature:(s16 x, s16 y) const
screenPos	source/display/Map.cpp	/^u16 Map::screenPos(s16 x, s16 y) const {$/;"	f	class:Map	signature:(s16 x, s16 y) const
scrollMaps	include/managers/MapManager.hpp	/^	void scrollMaps(s8 dx, s8 dy);$/;"	p	namespace:MapManager	signature:(s8 dx, s8 dy)
scrollMaps	source/managers/MapManager.cpp	/^void MapManager::scrollMaps(s8 dx, s8 dy) {$/;"	f	class:MapManager	signature:(s8 dx, s8 dy)
scrollX	include/display/Map.hpp	/^		static s16 scrollX;$/;"	m	class:Map	access:public
scrollX	source/display/Map.cpp	/^s16 Map::scrollX = 0;$/;"	m	class:Map	file:
scrollY	include/display/Map.hpp	/^		static s16 scrollY;$/;"	m	class:Map	access:public
scrollY	source/display/Map.cpp	/^s16 Map::scrollY = 0;$/;"	m	class:Map	file:
setSpriteFlip	external/libs5.c	/^void setSpriteFlip(u8 screen, u8 sprId, u8 hFlip, u8 vFlip)$/;"	f	signature:(u8 screen, u8 sprId, u8 hFlip, u8 vFlip)
setSpriteFlip	external/libs5.h	/^void setSpriteFlip(u8 screen, u8 sprId, u8 hFlip, u8 vFlip);$/;"	p	signature:(u8 screen, u8 sprId, u8 hFlip, u8 vFlip)
setSpriteFlip	tools/libs5/include/libs5.h	/^void setSpriteFlip(u8 screen, u8 sprId, u8 hFlip, u8 vFlip);$/;"	p	signature:(u8 screen, u8 sprId, u8 hFlip, u8 vFlip)
setSpriteFlip	tools/libs5/source/libs5.c	/^void setSpriteFlip(u8 screen, u8 sprId, u8 hFlip, u8 vFlip)$/;"	f	signature:(u8 screen, u8 sprId, u8 hFlip, u8 vFlip)
setSpriteMosaic	external/libs5.c	/^void setSpriteMosaic(u8 screen, u8 hSize, u8 vSize)$/;"	f	signature:(u8 screen, u8 hSize, u8 vSize)
setSpriteMosaic	external/libs5.h	/^void setSpriteMosaic(u8 screen, u8 hSize, u8 vSize);$/;"	p	signature:(u8 screen, u8 hSize, u8 vSize)
setSpriteMosaic	tools/libs5/include/libs5.h	/^void setSpriteMosaic(u8 screen, u8 hSize, u8 vSize);$/;"	p	signature:(u8 screen, u8 hSize, u8 vSize)
setSpriteMosaic	tools/libs5/source/libs5.c	/^void setSpriteMosaic(u8 screen, u8 hSize, u8 vSize)$/;"	f	signature:(u8 screen, u8 hSize, u8 vSize)
setSpritePalette	external/libs5.c	/^void setSpritePalette(u8 screen, u8 sprId, u8 palette)$/;"	f	signature:(u8 screen, u8 sprId, u8 palette)
setSpritePalette	external/libs5.h	/^void setSpritePalette(u8 screen, u8 sprId, u8 palette);$/;"	p	signature:(u8 screen, u8 sprId, u8 palette)
setSpritePalette	tools/libs5/include/libs5.h	/^void setSpritePalette(u8 screen, u8 sprId, u8 palette);$/;"	p	signature:(u8 screen, u8 sprId, u8 palette)
setSpritePalette	tools/libs5/source/libs5.c	/^void setSpritePalette(u8 screen, u8 sprId, u8 palette)$/;"	f	signature:(u8 screen, u8 sprId, u8 palette)
setSpritePriority	external/libs5.c	/^void setSpritePriority(u8 screen, u8 sprId, u8 priority)$/;"	f	signature:(u8 screen, u8 sprId, u8 priority)
setSpritePriority	external/libs5.h	/^void setSpritePriority(u8 screen, u8 sprId, u8 priority);$/;"	p	signature:(u8 screen, u8 sprId, u8 priority)
setSpritePriority	tools/libs5/include/libs5.h	/^void setSpritePriority(u8 screen, u8 sprId, u8 priority);$/;"	p	signature:(u8 screen, u8 sprId, u8 priority)
setSpritePriority	tools/libs5/source/libs5.c	/^void setSpritePriority(u8 screen, u8 sprId, u8 priority)$/;"	f	signature:(u8 screen, u8 sprId, u8 priority)
streamFile	tools/reader/reader.c	/^streamFile(const char *filename) {$/;"	f	file:	signature:(const char *filename)
tiles	include/display/Tileset.hpp	/^	const unsigned int *tiles;$/;"	m	struct:Tileset	access:public
tilesLength	include/display/Tileset.hpp	/^	u32 tilesLength;$/;"	m	struct:Tileset	access:public
tilesets	source/managers/MapManager.cpp	/^std::vector<Tileset*> MapManager::tilesets;$/;"	m	class:MapManager	file:
undergroundPal	build/underground.s	/^undergroundPal:$/;"	l
undergroundPalLen	build/underground.h	24;"	d
undergroundTiles	build/underground.s	/^undergroundTiles:$/;"	l
undergroundTilesLen	build/underground.h	21;"	d
water_effectTiles	assets/water_effect.s	/^water_effectTiles:$/;"	l
water_effectTilesLen	assets/water_effect.h	21;"	d
width	tools/reader/reader.c	/^unsigned short width, height;$/;"	v
x	include/display/Map.hpp	/^		u16 x() const { return m_x; }$/;"	f	class:Map	access:public	signature:() const
y	include/display/Map.hpp	/^		u16 y() const { return m_y; }$/;"	f	class:Map	access:public	signature:() const
zone	include/display/Map.hpp	/^		u16 zone() const { return m_zone; }$/;"	f	class:Map	access:public	signature:() const
~Game	include/core/Game.hpp	/^		~Game();$/;"	p	class:Game	access:public	signature:()
~Game	source/core/Game.cpp	/^Game::~Game() {$/;"	f	class:Game	signature:()
~Map	include/display/Map.hpp	/^		~Map();$/;"	p	class:Map	access:public	signature:()
~Map	source/display/Map.cpp	/^Map::~Map() {$/;"	f	class:Map	signature:()
